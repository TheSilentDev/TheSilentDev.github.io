{"version":3,"sources":["components/update.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Update","Component","react_default","a","createElement","className","href","class","App","update","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAgDeA,GC9CMC,6LDGjB,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,UACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,KACIH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,KACFH,EAAAC,EAAAC,cAAA,WAFF,qBAGoBF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,MAEpBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,gCAEEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6BAAhB,MAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,UADF,wBAGEH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,KACAH,EAAAC,EAAAC,cAAA,WAJF,8BAKEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAhB,YAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,OACAH,EAAAC,EAAAC,cAAA,wBAEEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAEhBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,mCACNJ,EAAAC,EAAAC,cAAA,KAAGG,MAAM,yBAEXL,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2CACNJ,EAAAC,EAAAC,cAAA,KAAGG,MAAM,uCAnCJN,cEWNO,0LARX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACK,EAAD,cAJUR,cCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75a46e95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Header from \"./header\";\n\nclass Update extends Component {\n  render() {\n    return (\n      <section className=\"container\">\n        <div className=\"split\">\n          <div className=\"left\">\n            <span className=\"name-left\">SILENT</span>\n            <p className=\"left-text\">\n              Hi<span className=\"left-punctuation\">,</span>\n              <br />\n              I'M THE SILENT DEV<span className=\"left-punctuation\">.</span>\n            </p>\n            <p className=\"left-update\">\n              SILENTLY DEVELOPING RIGHT NOW\n              <span className=\"left-inverted-punctuation\">.</span>\n            </p>\n            <p className=\"left-motivational-quote\">\n              <span className=\"left-punctuation\">&ldquo;</span>EVERYTHING TAKES\n              TIME\n              <span className=\"left-punctuation\">,</span>\n              <br /> KEEP BELIEVING IN YOURSELF\n              <span className=\"left-punctuation\">&rdquo;</span>\n            </p>\n          </div>\n          <div className=\"right\">\n            <span className=\"name-right\">DEV</span>\n            <div>\n              FOLLOW ME:\n              <hr className=\"yellow\" />\n            </div>\n            <div className=\"sm-links\">\n              <a href=\"https://github.com/TheSilentDev\">\n                <i class=\"fab fa-github fa-2x\" />\n              </a>\n              <a href=\"https://www.instagram.com/thesilentdev/\">\n                <i class=\"fab fa-instagram fa-2x\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Update;\n","import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <nav>\n        <ul className=\"navbar\">\n          <li className=\"center\">THE SILENT DEV</li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Update from \"./components/update\";\nimport \"./main.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <Update />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"reset-css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}